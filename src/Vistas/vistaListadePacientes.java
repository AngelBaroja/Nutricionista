package Vistas;

import Entidades.Paciente;
import static java.awt.PageAttributes.MediaType.A;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.mariadb.jdbc.Connection;
import persistencia.Conexion;
import persistencia.PacienteData;


public class vistaListadePacientes extends javax.swing.JInternalFrame {
private final Conexion conexion = new Conexion("jdbc:mysql://localhost/nutricionista", "root", "");
private PacienteData pacienteData = new PacienteData(conexion);

    public vistaListadePacientes() {
        initComponents();
        cargarlistaPaciente();
    }
//carga los pacientes
    private void cargarlistaPaciente() {
    ArrayList<Paciente> pacientes = pacienteData.listaPaciente(); 

    DefaultTableModel model = new DefaultTableModel(); 
    model.addColumn("Nro Paciente");
    model.addColumn("Nombre");
    model.addColumn("Edad");
    model.addColumn("Altura (m)");
    model.addColumn("Peso Actual (kg)");
    model.addColumn("Peso Buscado (kg)");

    for (Paciente p : pacientes) {
        int nroPaciente = p.getNroPaciente();
        String nombre = p.getNombre();
        int edad = p.getEdad();

        String altura = String.format("%.2f", p.getAltura());
        String pesoActual = String.format("%.2f", p.getPesoActual());
        String pesoBuscado = String.format("%.2f", p.getPesoBuscado());

        model.addRow(new Object[]{nroPaciente, nombre, edad, altura, pesoActual, pesoBuscado});
    }

    listaPaciente.setModel(model);
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton6 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaPaciente = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        Salir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Id = new javax.swing.JTextField();
        Actualizar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        jRadioButtonpesologrado = new javax.swing.JRadioButton();
        jRadioButtonseacercanalpeso = new javax.swing.JRadioButton();

        jButton4.setText("jButton4");

        jButton5.setText("jButton5");

        jToggleButton1.setText("jToggleButton1");

        jButton6.setText("jButton6");

        listaPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Edad", "Altura", "Peso actual", "Peso buscado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listaPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPacienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listaPaciente);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Lista Paciente");

        Salir.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Buscar Paciente:");

        Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdActionPerformed(evt);
            }
        });

        Actualizar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Actualizar.setText("Actualizar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });

        borrar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        borrar.setText("Borrar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        jRadioButtonpesologrado.setText("Peso logrado");
        jRadioButtonpesologrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonpesologradoActionPerformed(evt);
            }
        });

        jRadioButtonseacercanalpeso.setText("Se acerca al peso");
        jRadioButtonseacercanalpeso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonseacercanalpesoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(borrar)
                .addGap(18, 18, 18)
                .addComponent(Actualizar)
                .addGap(18, 18, 18)
                .addComponent(Salir)
                .addGap(173, 173, 173))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131)
                        .addComponent(jRadioButtonpesologrado)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonseacercanalpeso))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jRadioButtonpesologrado)
                            .addComponent(jRadioButtonseacercanalpeso))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Actualizar)
                    .addComponent(Salir)
                    .addComponent(borrar))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPacienteMouseClicked

    }//GEN-LAST:event_listaPacienteMouseClicked

//buscar
    private void IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdActionPerformed
         try {
            int nroPaciente = Integer.parseInt(Id.getText());

            Paciente paciente = pacienteData.buscarPaciente(nroPaciente);

            if (paciente != null) {
                DefaultTableModel model = (DefaultTableModel) listaPaciente.getModel();
                model.setRowCount(0); // Limpiar filas previas

                model.addRow(new Object[]{
                    paciente.getNroPaciente(), 
                    paciente.getNombre(), 
                    paciente.getEdad(), 
                    paciente.getAltura(), 
                    paciente.getPesoActual(), 
                    paciente.getPesoBuscado()
                });
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró un paciente con ese ID.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido como ID.");
        }
         
    }//GEN-LAST:event_IdActionPerformed
//actualizar
    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed
    for (int fila = 0; fila < listaPaciente.getRowCount(); fila++) {
 
        int nroPaciente = (int) listaPaciente.getValueAt(fila, 0);

        Paciente paciente = pacienteData.buscarPaciente(nroPaciente);

        if (paciente != null) {
  
            String nombre = listaPaciente.getValueAt(fila, 1).toString().trim();
            int edad = Integer.parseInt(listaPaciente.getValueAt(fila, 2).toString());
            double altura = Double.parseDouble(listaPaciente.getValueAt(fila, 3).toString());
            double pesoActual = Double.parseDouble(listaPaciente.getValueAt(fila, 4).toString());
            double pesoBuscado = Double.parseDouble(listaPaciente.getValueAt(fila, 5).toString());

            
            boolean actualizado = false;

            if (!paciente.getNombre().equals(nombre)) {
                paciente.setNombre(nombre);
                actualizado = true;
            }
            if (paciente.getEdad() != edad) {
                paciente.setEdad(edad);
                actualizado = true;
            }
            if (paciente.getAltura() != altura) {
                paciente.setAltura(altura);
                actualizado = true;
            }
            if (paciente.getPesoActual() != pesoActual) {
                paciente.setPesoActual(pesoActual);
                actualizado = true;
            }
            if (paciente.getPesoBuscado() != pesoBuscado) {
                paciente.setPesoBuscado(pesoBuscado);
                actualizado = true;
            }

            if (actualizado) {
                pacienteData.actualizarPaciente(paciente);
                System.out.println("Paciente actualizado: " + nroPaciente);
            }
        } else {
            System.out.println("Paciente con ID " + nroPaciente + " no encontrado");
        }
    }
    JOptionPane.showMessageDialog(this, "Actualización completada para todos los pacientes.");


   
    }//GEN-LAST:event_ActualizarActionPerformed
//editar
    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
     int respuesta = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas salir?", "Confirmación de salida", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

    if (respuesta == JOptionPane.YES_OPTION) {
        System.exit(0); 
    }
    }//GEN-LAST:event_SalirActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
                                      
    int filaSeleccionada = listaPaciente.getSelectedRow();
    
    if (filaSeleccionada != -1) {
  
        int id = (int) listaPaciente.getValueAt(filaSeleccionada, 0);
        
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este elemento?", "Confirmación de borrado", JOptionPane.YES_NO_OPTION);
        
        if (confirmacion == JOptionPane.YES_OPTION) {
          
            boolean exito = pacienteData.borradoFisico(id);
            
            if (exito) {
             
                ((DefaultTableModel) listaPaciente.getModel()).removeRow(filaSeleccionada);
                JOptionPane.showMessageDialog(this, "Elemento eliminado con éxito.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el elemento de la base de datos.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona un elemento para eliminar.");
    }
    }//GEN-LAST:event_borrarActionPerformed

    private void jRadioButtonpesologradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonpesologradoActionPerformed
                                                                          
    }//GEN-LAST:event_jRadioButtonpesologradoActionPerformed

    private void jRadioButtonseacercanalpesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonseacercanalpesoActionPerformed

    }//GEN-LAST:event_jRadioButtonseacercanalpesoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JTextField Id;
    private javax.swing.JButton Salir;
    private javax.swing.JButton borrar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButtonpesologrado;
    private javax.swing.JRadioButton jRadioButtonseacercanalpeso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable listaPaciente;
    // End of variables declaration//GEN-END:variables

}