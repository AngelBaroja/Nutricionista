/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import Entidades.Comida;
import Entidades.Dieta;
import Entidades.RenglonDeMenu;
import java.awt.Color;
import java.awt.Cursor;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import persistencia.ComidaData;
import persistencia.Conexion;
import persistencia.DietaData;
import persistencia.PacienteData;
import persistencia.RenglonDeMenuData;

/**
 *
 * @author El Angel
 */
public class VistaRenglonDeMenu extends javax.swing.JInternalFrame {

    Conexion conexion = new Conexion("jdbc:mysql://localhost/nutricionista", "root", "");
    PacienteData pacienteData = new PacienteData(conexion);
    RenglonDeMenuData renglonData = new RenglonDeMenuData(conexion);
    ComidaData comidaData = new ComidaData(conexion);

 public VistaRenglonDeMenu() {
    initComponents();    
    armarTabla();
    cargarFilas();
    cargarCombo();
    agregarValidacionNumerica(jtDesdeCalorias);
    agregarValidacionNumerica(jtHastaCalorias);
    configurarSpinner(jsCantidadPorciones);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtNombreComida = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jcbTipo = new javax.swing.JComboBox<>();
        jtDesdeCalorias = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtHastaCalorias = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtDetalleComida = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jsCantidadPorciones = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jlCaloriasTotales = new javax.swing.JLabel();
        jbGenerar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Lucida Handwriting", 0, 36)); // NOI18N
        jLabel1.setText("Renglon de Menu");

        jLabel2.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel2.setText("Nombre de la Comida : ");

        jtNombreComida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtNombreComidaKeyReleased(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel3.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel3.setText("Tipo:");

        jLabel4.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel4.setText("Calorias:");

        jcbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTipoActionPerformed(evt);
            }
        });

        jtDesdeCalorias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtDesdeCaloriasKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel5.setText("desde");

        jLabel6.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel6.setText("hasta:");

        jtHastaCalorias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtHastaCaloriasKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel7.setText("Detalle de la Comida : ");

        jtDetalleComida.setToolTipText("");
        jtDetalleComida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jtDetalleComidaMouseEntered(evt);
            }
        });
        jtDetalleComida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtDetalleComidaKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel8.setText("Cantidad de Porciones:");

        jsCantidadPorciones.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsCantidadPorcionesStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel9.setText("Cantidad de Porciones:");

        jlCaloriasTotales.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jlCaloriasTotales.setText("                                ");

        jbGenerar.setText("Generar");
        jbGenerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jbGenerarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jbGenerarMouseExited(evt);
            }
        });

        jButton2.setText("Salir");

        jLabel10.setFont(new java.awt.Font("Lucida Handwriting", 0, 14)); // NOI18N
        jLabel10.setText("Menu:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Menu 1", "Menu 2", "Menu 3", "Menu 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jbGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(465, 465, 465)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtNombreComida, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtDesdeCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtHastaCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtDetalleComida, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(142, 142, 142)
                                    .addComponent(jLabel1))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jsCantidadPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jlCaloriasTotales)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtNombreComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtDetalleComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtDesdeCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jtHastaCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jsCantidadPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jlCaloriasTotales))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtNombreComidaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtNombreComidaKeyReleased
     buscarComida();
    }//GEN-LAST:event_jtNombreComidaKeyReleased

    private void jtDetalleComidaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDetalleComidaKeyReleased
     buscarComida();
    }//GEN-LAST:event_jtDetalleComidaKeyReleased

    private void jcbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTipoActionPerformed
     buscarComida();
    }//GEN-LAST:event_jcbTipoActionPerformed

    private void jtDesdeCaloriasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDesdeCaloriasKeyReleased
       buscarComida();
    }//GEN-LAST:event_jtDesdeCaloriasKeyReleased

    private void jtHastaCaloriasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtHastaCaloriasKeyReleased
       buscarComida();
    }//GEN-LAST:event_jtHastaCaloriasKeyReleased

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        int caloriasPorcion=(int) tabla.getValueAt(tabla.getSelectedRow(), 3);
        int spinner =(Integer) jsCantidadPorciones.getValue();
        jlCaloriasTotales.setText(String.valueOf(caloriasPorcion*(Integer) jsCantidadPorciones.getValue()));
    }//GEN-LAST:event_tablaMouseClicked

    private void jsCantidadPorcionesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsCantidadPorcionesStateChanged
        if (tabla.getSelectedRow()!=-1) {
            int caloriasPorcion=(int) tabla.getValueAt(tabla.getSelectedRow(), 3);
            int spinner =(Integer) jsCantidadPorciones.getValue();
            jlCaloriasTotales.setText(String.valueOf(caloriasPorcion*(Integer) jsCantidadPorciones.getValue()));
        }
    }//GEN-LAST:event_jsCantidadPorcionesStateChanged

    private void jbGenerarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbGenerarMouseEntered
          jbGenerar.setToolTipText("Permite generar un nuevo Renglon con comida");
          jbGenerar.setFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 13));
          setCursor(new Cursor(Cursor.HAND_CURSOR));
          jbGenerar.setBorder(new LineBorder(Color.RED, 2));
    }//GEN-LAST:event_jbGenerarMouseEntered

    private void jbGenerarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbGenerarMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
         jbGenerar.setFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 13));
         jbGenerar.setBorder(new LineBorder(Color.GRAY, 1));
    }//GEN-LAST:event_jbGenerarMouseExited

    private void jtDetalleComidaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtDetalleComidaMouseEntered
       jtDetalleComida.setToolTipText("Porfavor, solo ingresar un Ingrediente.");
    }//GEN-LAST:event_jtDetalleComidaMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGenerar;
    private javax.swing.JComboBox<String> jcbTipo;
    private javax.swing.JLabel jlCaloriasTotales;
    private javax.swing.JSpinner jsCantidadPorciones;
    private javax.swing.JTextField jtDesdeCalorias;
    private javax.swing.JTextField jtDetalleComida;
    private javax.swing.JTextField jtHastaCalorias;
    private javax.swing.JTextField jtNombreComida;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };

    private void armarTabla() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Tipo");
        modelo.addColumn("Calorias");
        modelo.addColumn("Detalle");
        tabla.setModel(modelo);
    }

    private void cargarFilas() {
        for (Comida listaComida : comidaData.listarComidasActivas()) {
            modelo.addRow(new Object[]{
                listaComida.getCodComida(),
                listaComida.getNombre(),
                listaComida.getTipoComida(),
                listaComida.getCaloriasPorPorcion(),
                listaComida.getDetalle()
            });
        }
    }

    private void borrarFilasTablas() {
        int fila = modelo.getRowCount() - 1;
        for (int i = fila; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public void cargarCombo() {
        jcbTipo.addItem("                      - - TIPO - -");
        jcbTipo.addItem("desayuno");
        jcbTipo.addItem("merienda");
        jcbTipo.addItem("snack");
        jcbTipo.addItem("almuerzo");
        jcbTipo.addItem("cena");
    }
    
    public void buscarComida(){
         borrarFilasTablas();

        String nombreComida = jtNombreComida.getText().toLowerCase();
        String detalleComida = jtDetalleComida.getText().toLowerCase();
        String desdeCalorias = jtDesdeCalorias.getText();
        String hastaCalorias = jtHastaCalorias.getText();
        int tipoSeleccionado = jcbTipo.getSelectedIndex();

        // Filtrar las comidas activas
        for (Comida comida : comidaData.listarComidasActivas()) {
            // Validar si coincide el nombre o si el campo está vacío
            boolean coincideNombre = comida.getNombre().toLowerCase().contains(nombreComida) || nombreComida.isEmpty();

            // Validar si coincide el detalle o si el campo está vacío
            boolean coincideDetalle = comida.getDetalle().toLowerCase().contains(detalleComida) || detalleComida.isEmpty();

            // Verificar el rango de calorías (si está definido)
            boolean coincideCalorias = true; // Inicializar en verdadero si no se ingresan valores
            if (!desdeCalorias.isEmpty() && !hastaCalorias.isEmpty()) {
                int caloriasDesde = Integer.parseInt(desdeCalorias);
                int caloriasHasta = Integer.parseInt(hastaCalorias);
                coincideCalorias = comida.getCaloriasPorPorcion() >= caloriasDesde && comida.getCaloriasPorPorcion() <= caloriasHasta;
            }

            // Verificar el tipo de comida (tipoSeleccionado = 0 es "todos los tipos")
            boolean coincideTipo = tipoSeleccionado == 0 || comida.getTipoComida().equalsIgnoreCase(jcbTipo.getSelectedItem().toString());

            // Si todas las condiciones se cumplen, agregar la fila
            if (coincideNombre && coincideDetalle && coincideCalorias && coincideTipo) {
                modelo.addRow(new Object[]{
                    comida.getCodComida(),
                    comida.getNombre(),
                    comida.getTipoComida(),
                    comida.getCaloriasPorPorcion(),
                    comida.getDetalle()
                });
            }
        }
        
    }
      public boolean esDoubleValido(String valor) {
        try {
            Double.parseDouble(valor); 
            return true; 
        } catch (NumberFormatException e) {
            return false; 
        }
    }
    private void agregarValidacionNumerica(JTextField textField) {
    textField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            char c = evt.getKeyChar();
            // Si el carácter no es un número y no es tecla de borrar (backspace)
            if (!Character.isDigit(c) && c != '\b') {
                evt.consume(); // Bloquear la tecla
            }
        }
    });
}
    private void configurarSpinner(JSpinner spinner) {
    // Establecer el modelo con un rango de 1 a 9 y un incremento de 1
    SpinnerNumberModel model = new SpinnerNumberModel(1, 1, 9, 1);
    spinner.setModel(model);

    // Deshabilitar la edición manual en el campo de texto del JSpinner
    JComponent editor = spinner.getEditor();
    JFormattedTextField textField = ((JSpinner.DefaultEditor) editor).getTextField();
    textField.setEditable(false); // Desactivar la edición manual
}

}
