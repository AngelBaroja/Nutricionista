/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import Entidades.Dieta;
import Entidades.Paciente;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.Conexion;
import persistencia.DietaData;
import persistencia.PacienteData;

/**
 *
 * @author El Angel
 */
public class VistaIniciarDieta extends javax.swing.JInternalFrame {

    Conexion conexion = new Conexion("jdbc:mysql://localhost/nutricionista", "root", "");
    PacienteData pacienteData = new PacienteData(conexion);
    DietaData dietaData = new DietaData(conexion);

    /**
     * Creates new form VistaDieta
     */
    
    
    public VistaIniciarDieta() {
        initComponents();
        cargarCombo();
        armarTabla();        
        cargarFilas();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jdcFechaInicial = new com.toedter.calendar.JDateChooser();
        jdcFechaFinal = new com.toedter.calendar.JDateChooser();
        jcbPacientes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jlFechaInicial = new javax.swing.JLabel();
        jlFechaFinal = new javax.swing.JLabel();
        jbGenerarDieta = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jtBuscarDieta = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel1.setText("Iniciar Dieta");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setText("Fecha Inicial:");

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setText("Fecha Final:");

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel4.setText("Paciente:");

        jdcFechaInicial.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaInicialPropertyChange(evt);
            }
        });

        jdcFechaFinal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaFinalPropertyChange(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jLabel6.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel6.setText("Lista de Dietas");

        jlFechaInicial.setText(" ");

        jlFechaFinal.setText(" ");

        jbGenerarDieta.setText("Generar");
        jbGenerarDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbGenerarDietaMouseClicked(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel7.setText("Buscar por dieta:");

        jtBuscarDieta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBuscarDietaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jbGenerarDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jtBuscarDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jdcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jlFechaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jdcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jlFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(224, 224, 224))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlFechaInicial)
                    .addComponent(jLabel2)
                    .addComponent(jdcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdcFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcbPacientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtBuscarDieta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGenerarDieta)
                    .addComponent(jButton2))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void jdcFechaInicialPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaInicialPropertyChange
     if (jdcFechaFinal.getDate() != null) {
                LocalDate fechaInicial = jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate fechaFinal = jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int diasDiferencia = (int) ChronoUnit.DAYS.between(fechaInicial, fechaFinal);

                if (diasDiferencia < 3 || diasDiferencia > 7) {
                    JOptionPane.showMessageDialog(this,
                            "La fecha Inicial debe estar entre 3 y 7 días antes de la fecha Final.",
                            "Error en las fechas",
                            JOptionPane.ERROR_MESSAGE);

                } else {
                    borrarFilasTablas();
                    listarXBusqueda();
                }

            }

            Date fechaSeleccionada = jdcFechaInicial.getDate();
            if (fechaSeleccionada!=null) {
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String fechaFormateada = formato.format(fechaSeleccionada);
                jlFechaInicial.setText(fechaFormateada);
            }
            

        

    }//GEN-LAST:event_jdcFechaInicialPropertyChange
   
    private void jdcFechaFinalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaFinalPropertyChange
       

            if (jdcFechaInicial.getDate() != null) {
                LocalDate fechaInicial = jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate fechaFinal = jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int diasDiferencia = (int) ChronoUnit.DAYS.between(fechaInicial, fechaFinal);

                if (diasDiferencia < 3 || diasDiferencia > 7) {
                    JOptionPane.showMessageDialog(this,
                            "La fecha final debe situarse entre 3 y 7 días a partir de la fecha inicial.",
                            "Error en las fechas",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    borrarFilasTablas();
                    listarXBusqueda();
                }

            }
            Date fechaSeleccionada = jdcFechaFinal.getDate();
            if (fechaSeleccionada!=null) {
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String fechaFormateada = formato.format(fechaSeleccionada);
            jlFechaFinal.setText(fechaFormateada);
            }
            

        
    }//GEN-LAST:event_jdcFechaFinalPropertyChange

    private void jtBuscarDietaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBuscarDietaKeyReleased
        borrarFilasTablas();
        listarXBusqueda();
    }//GEN-LAST:event_jtBuscarDietaKeyReleased

    private void jbGenerarDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbGenerarDietaMouseClicked

        boolean invalidado = false;

        if (jdcFechaInicial.getDate() == null || jdcFechaFinal.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "Seleccione una Fecha de inicio y de fin",
                    "Error en las fechas",
                    JOptionPane.ERROR_MESSAGE);
            invalidado = true;
        } else if (jdcFechaInicial.getDate() != null && jdcFechaFinal.getDate() != null) {
            LocalDate fechaInicial = jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate fechaFinal = jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int diasDiferencia = (int) ChronoUnit.DAYS.between(fechaInicial, fechaFinal);
            if (diasDiferencia < 3 || diasDiferencia > 7) {
                JOptionPane.showMessageDialog(this,
                        "Verifique que las fechas tengan \n entre 3 a 7 dias de diferencia",
                        "Error en las fechas",
                        JOptionPane.ERROR_MESSAGE);
                invalidado = true;
            }

        }else if (jcbPacientes.getSelectedItem().equals("- - PACIENTES - -")) {
             JOptionPane.showMessageDialog(this,
                    "Seleccione un Paciente",
                    "Error Seleccion Dieta",
                    JOptionPane.ERROR_MESSAGE);
            invalidado = true;
        }else if (tabla.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this,
                    "Seleccione una Dieta de la lista",
                    "Error Seleccion Dieta",
                    JOptionPane.ERROR_MESSAGE);
            invalidado = true;
        }

        if (!invalidado) {            
            int indiceSeleccionado = jcbPacientes.getSelectedIndex();
            int contador=0;
            Paciente paciente = new Paciente();
            for (Paciente a : pacienteData.listaPacienteSinDieta()) {
                contador++;
                if (contador==indiceSeleccionado) {
                    paciente = a;
                    break;
                }
            }  
            int fila = tabla.getSelectedRow();
            int codDieta = (int) tabla.getValueAt(fila, 0);
            Dieta dieta = dietaData.buscarDieta(codDieta);
            dieta.setFechaIni(jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            dieta.setFechaFin(jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            dieta.setPesoInicial(paciente.getPesoActual());
            dieta.setPesoFinal(0);
            dieta.setPaciente(paciente);
            dietaData.GuardarDietaConPaciente(dieta);
            JOptionPane.showMessageDialog(this, paciente.getNombre()+" inicia la dieta "+dieta.getNombreD());
            limpiarCampos();
            limpiarCombo();
            cargarCombo();
        }


    }//GEN-LAST:event_jbGenerarDietaMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGenerarDieta;
    private javax.swing.JComboBox<String> jcbPacientes;
    private com.toedter.calendar.JDateChooser jdcFechaFinal;
    private com.toedter.calendar.JDateChooser jdcFechaInicial;
    private javax.swing.JLabel jlFechaFinal;
    private javax.swing.JLabel jlFechaInicial;
    private javax.swing.JTextField jtBuscarDieta;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private void cargarCombo() {
         jcbPacientes.addItem("- - PACIENTES - -");
        for (Paciente a : pacienteData.listaPacienteSinDieta()) {
            jcbPacientes.addItem(a.toString());
        }
    }
    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
   

    private void armarTabla() {
        modelo.addColumn("Codigo");
        modelo.addColumn("Dieta");
        modelo.addColumn("Calorias");
        modelo.addColumn("Estado");
        tabla.setModel(modelo);
    }
   

    private void cargarFilas() {
        for (Dieta listaDieta : dietaData.listaDietaParaCargarPaciente()) {
            modelo.addRow(new Object[]{
                listaDieta.getCodDieta(),
                listaDieta.getNombreD(),
                listaDieta.getTotalCalorias(),
                listaDieta.isEstado() ? "Activa" : "No Activa"
            });
        }
    }
  

    private void borrarFilasTablas() {
        int fila = modelo.getRowCount() - 1;
        for (int i = fila; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void listarXBusqueda() {
        if (jdcFechaInicial.getDate() == null || jdcFechaFinal.getDate() == null) {
            for (Dieta listaDieta : dietaData.listaDietaParaCargarPaciente()) {
                if (listaDieta.getNombreD().toLowerCase().contains(jtBuscarDieta.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{
                        listaDieta.getCodDieta(),
                        listaDieta.getNombreD(),
                        listaDieta.getTotalCalorias(),
                        listaDieta.isEstado() ? "Activa" : "No Activa"
                    });
                }
            }
        } else {
            LocalDate fechaInicial = jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate fechaFinal = jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int diasDiferencia = (int) ChronoUnit.DAYS.between(fechaInicial, fechaFinal);
            for (Dieta listaDieta : dietaData.listaDietaXCantidadDias(diasDiferencia)) {
                if (listaDieta.getNombreD().toLowerCase().contains(jtBuscarDieta.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{
                        listaDieta.getCodDieta(),
                        listaDieta.getNombreD(),
                        listaDieta.getTotalCalorias(),
                        listaDieta.isEstado() ? "Activa" : "No Activa"
                    });
                }

            }
        }

    }
    public void limpiarCombo(){
        jcbPacientes.removeAllItems();
    }
    
    public void limpiarCampos(){        
        jlFechaInicial.setText("");      
        jlFechaFinal.setText("");        
    }

}
