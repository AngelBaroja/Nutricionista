package Vistas;

import Entidades.Dieta;
import Entidades.MenuDiario;
import Entidades.Paciente;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.Conexion;
import persistencia.DietaData;
import persistencia.MenuDiarioData;
import persistencia.PacienteData;

/**
 *
 * @author El Angel
 */
public class VistaPacientesEnDieta extends javax.swing.JInternalFrame {

    Conexion conexion = new Conexion("jdbc:mysql://localhost/nutricionista", "root", "");
    PacienteData pacienteData = new PacienteData(conexion);
    DietaData dietaData = new DietaData(conexion);
    MenuDiarioData menuData = new MenuDiarioData(conexion);

    public VistaPacientesEnDieta() {
        initComponents();
        armarTabla2();
        cargarFilas2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        jtBuscarDieta1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jrActivos = new javax.swing.JRadioButton();
        jlNombrePaciente = new javax.swing.JLabel();
        jlCodigo = new javax.swing.JLabel();
        jdcFechaInicial = new com.toedter.calendar.JDateChooser();
        jdcFechaFinal = new com.toedter.calendar.JDateChooser();
        jlFechaFinal = new javax.swing.JLabel();
        jlFechaInicial = new javax.swing.JLabel();
        jtPesoInicial = new javax.swing.JTextField();
        jtPesoFinal = new javax.swing.JTextField();
        jcbEstado = new javax.swing.JCheckBox();
        jlCalorias = new javax.swing.JLabel();
        jbSalir = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbVerificar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel5.setText("Pacientes con Dieta");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, 36));

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 633, 115));

        jtBuscarDieta1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBuscarDieta1KeyReleased(evt);
            }
        });
        jPanel1.add(jtBuscarDieta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 273, -1));

        jLabel8.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel8.setText("Buscar por nombre de Paciente:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel9.setText("Codigo:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, -1, -1));

        jLabel10.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel10.setText("Paciente;");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 250, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel11.setText("Fecha Inicial:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        jLabel12.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel12.setText("Fecha Final:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, -1, -1));

        jLabel13.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel13.setText("Peso Inicial:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, -1, -1));

        jLabel14.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel14.setText("Peso Final:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 330, -1, -1));

        jLabel15.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel15.setText("Calorias:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 370, -1, -1));

        jLabel16.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel16.setText("Estado:");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 370, -1, -1));

        jLabel17.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel17.setText("Terminada:");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, -1, -1));

        jrActivos.setBackground(new java.awt.Color(0, 0, 0));
        jrActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrActivosActionPerformed(evt);
            }
        });
        jPanel1.add(jrActivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, -1, -1));

        jlNombrePaciente.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlNombrePaciente.setText("            ");
        jPanel1.add(jlNombrePaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1104, 248, 153, -1));

        jlCodigo.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlCodigo.setText("            ");
        jPanel1.add(jlCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, -1));

        jdcFechaInicial.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaInicialPropertyChange(evt);
            }
        });
        jPanel1.add(jdcFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 20, -1));

        jdcFechaFinal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaFinalPropertyChange(evt);
            }
        });
        jPanel1.add(jdcFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 290, 20, -1));

        jlFechaFinal.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlFechaFinal.setText("                    ");
        jPanel1.add(jlFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 290, -1, -1));

        jlFechaInicial.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlFechaInicial.setText("                    ");
        jPanel1.add(jlFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 290, -1, -1));

        jtPesoInicial.setBackground(new java.awt.Color(204, 204, 204));
        jtPesoInicial.setForeground(new java.awt.Color(0, 0, 0));
        jtPesoInicial.setText(" ");
        jPanel1.add(jtPesoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 96, -1));

        jtPesoFinal.setBackground(new java.awt.Color(204, 204, 204));
        jtPesoFinal.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jtPesoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 330, 107, -1));

        jcbEstado.setBackground(new java.awt.Color(0, 0, 0));
        jcbEstado.setForeground(new java.awt.Color(0, 0, 0));
        jcbEstado.setText("jCheckBox1");
        jPanel1.add(jcbEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 370, 20, -1));

        jlCalorias.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jlCalorias.setText("               ");
        jPanel1.add(jlCalorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 370, -1, -1));

        jbSalir.setBackground(new java.awt.Color(204, 204, 204));
        jbSalir.setForeground(new java.awt.Color(0, 0, 0));
        jbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/exit (2).png"))); // NOI18N
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        jPanel1.add(jbSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 430, 91, 30));

        jbActualizar.setBackground(new java.awt.Color(204, 204, 204));
        jbActualizar.setForeground(new java.awt.Color(0, 0, 0));
        jbActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/refresh (2).png"))); // NOI18N
        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(jbActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 120, 30));

        jbBorrar.setBackground(new java.awt.Color(204, 204, 204));
        jbBorrar.setForeground(new java.awt.Color(0, 0, 0));
        jbBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trash (1).png"))); // NOI18N
        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(jbBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, 100, 30));

        jbVerificar.setBackground(new java.awt.Color(204, 204, 204));
        jbVerificar.setForeground(new java.awt.Color(0, 0, 0));
        jbVerificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/shield-trust.png"))); // NOI18N
        jbVerificar.setText("Verificar");
        jbVerificar.setEnabled(false);
        jbVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerificarActionPerformed(evt);
            }
        });
        jPanel1.add(jbVerificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 430, 120, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/descarga (2).jpeg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 690, 506));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtBuscarDieta1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBuscarDieta1KeyReleased
        borrarFilasTablas();
        if (jrActivos.isSelected()) {
            for (Dieta listaDietaConPacienteCargado : dietaData.listaDietaConPacienteCargadosEstadoFalse()) {
                if (listaDietaConPacienteCargado.getPaciente().getNombre().toLowerCase().contains(jtBuscarDieta1.getText())) {
                    modelo2.addRow(new Object[]{
                        listaDietaConPacienteCargado.getCodDieta(),
                        listaDietaConPacienteCargado.getNombreD(),
                        listaDietaConPacienteCargado.getPaciente().getNombre(),
                        listaDietaConPacienteCargado.getFechaIni(),
                        listaDietaConPacienteCargado.getFechaFin(),
                        listaDietaConPacienteCargado.getPesoInicial(),
                        listaDietaConPacienteCargado.getPesoFinal(),
                        listaDietaConPacienteCargado.getTotalCalorias(),
                        listaDietaConPacienteCargado.isEstado() ? "Activa" : "No Activa"
                    });
                }
            }
        } else {
            for (Dieta listaDietaConPacienteCargado : dietaData.listaDietaConPacienteCargadosEstadoActivo()) {
                if (listaDietaConPacienteCargado.getPaciente().getNombre().toLowerCase().contains(jtBuscarDieta1.getText())) {
                    modelo2.addRow(new Object[]{
                        listaDietaConPacienteCargado.getCodDieta(),
                        listaDietaConPacienteCargado.getNombreD(),
                        listaDietaConPacienteCargado.getPaciente().getNombre(),
                        listaDietaConPacienteCargado.getFechaIni(),
                        listaDietaConPacienteCargado.getFechaFin(),
                        listaDietaConPacienteCargado.getPesoInicial(),
                        listaDietaConPacienteCargado.getPesoFinal(),
                        listaDietaConPacienteCargado.getTotalCalorias(),
                        listaDietaConPacienteCargado.isEstado() ? "Activa" : "No Activa"
                    });
                }
            }
        }
    }//GEN-LAST:event_jtBuscarDieta1KeyReleased

    private void jrActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrActivosActionPerformed
        borrarFilasTablas();
        cargarFilas();
        if (jrActivos.isSelected()) {
            jbVerificar.setEnabled(true);
        }else{
            jbVerificar.setEnabled(false);
        }
    }//GEN-LAST:event_jrActivosActionPerformed

    private void tabla2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla2MouseClicked
        int fila = tabla2.getSelectedRow();
        int codDieta = (int) tabla2.getValueAt(fila, 0);
        Dieta dieta = dietaData.buscarDieta(codDieta);
        jlCodigo.setText(Integer.toString(dieta.getCodDieta()));
        jlNombrePaciente.setText(dieta.getPaciente().getNombre());
        // Convierte LocalDate a Date
        Date fechaInicial = Date.from(dieta.getFechaIni().atStartOfDay(ZoneId.systemDefault()).toInstant());
        // Asigna la fecha al JDateChooser
        jdcFechaInicial.setDate(fechaInicial);
        Date fechaFin = Date.from(dieta.getFechaFin().atStartOfDay(ZoneId.systemDefault()).toInstant());
        jdcFechaFinal.setDate(fechaFin);

        jtPesoInicial.setText(Double.toString(dieta.getPesoInicial()));
        jtPesoFinal.setText(Double.toString(dieta.getPesoFinal()));
        jlCalorias.setText(Integer.toString(dieta.getTotalCalorias()));
        jcbEstado.setSelected(dieta.isEstado());

    }//GEN-LAST:event_tabla2MouseClicked
  
    private void jdcFechaInicialPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaInicialPropertyChange
      
            Date fechaSeleccionada = jdcFechaInicial.getDate();
            if (fechaSeleccionada!=null) {
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String fechaFormateada = formato.format(fechaSeleccionada);
            jlFechaInicial.setText(fechaFormateada);
            }
           
     

    }//GEN-LAST:event_jdcFechaInicialPropertyChange
 
    private void jdcFechaFinalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaFinalPropertyChange
       
            Date fechaSeleccionada = jdcFechaFinal.getDate();
            if (fechaSeleccionada!=null) {
                 SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String fechaFormateada = formato.format(fechaSeleccionada);
            jlFechaFinal.setText(fechaFormateada);
            }
           
        
    }//GEN-LAST:event_jdcFechaFinalPropertyChange

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        if (tabla2.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Porfavor, seleccione un elemento de la lista");
        } else if (!esDoubleValido(jtPesoInicial.getText()) || !esDoubleValido(jtPesoFinal.getText())) {
            JOptionPane.showMessageDialog(this, "El Peso Inicial o Final solo acepta numeros");
        } else {
            Dieta dieta = dietaData.buscarDieta(Integer.parseInt(jlCodigo.getText()));
            dieta.setFechaIni(jdcFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            dieta.setFechaFin(jdcFechaFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            dieta.setPesoInicial(Double.parseDouble(jtPesoInicial.getText()));            
            dieta.setPesoFinal(Double.parseDouble(jtPesoFinal.getText())); 
            Double pesoFinal =  Double.parseDouble(jtPesoFinal.getText());
            if (pesoFinal!=0) {
                Paciente paciente = dieta.getPaciente();
                paciente.setPesoActual(pesoFinal);
                pacienteData.actualizarPaciente(paciente);                
            }       
            dieta.setEstado(jcbEstado.isSelected());
            dietaData.actualizarDieta(dieta);
            JOptionPane.showMessageDialog(this, "Dieta Actualizada con exito");          
            borrarFilasTablas();
            limpiarCampos();
            cargarFilas();
        }
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        if (tabla2.getSelectedRow()==-1) {
            JOptionPane.showMessageDialog(this, "Porfavor, seleccione un elemento de la lista");
        }else{
            Dieta dieta = dietaData.buscarDieta(Integer.parseInt(jlCodigo.getText()));
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este elemento?", "Confirmación de borrado", JOptionPane.YES_NO_OPTION);
        
            if (confirmacion == JOptionPane.YES_OPTION) {
                dietaData.borradoDietaFisico(dieta.getCodDieta());
                JOptionPane.showMessageDialog(this, "Dieta Eliminada con exito");
                limpiarCampos();
                borrarFilasTablas();
                cargarFilas();
            }
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerificarActionPerformed
        if (tabla2.getSelectedRow()!=-1) {
            int codDieta = (int)tabla2.getValueAt(tabla2.getSelectedRow(), 0);
            Dieta dieta = dietaData.buscarDieta(codDieta);
            JOptionPane.showMessageDialog(this, dieta.evaluarProgresoHaciaPesoObjetivo());
        }else{
            JOptionPane.showMessageDialog(this, "Porfavor, seleccione una Dieta de la tabla para verificar");
        }
    }//GEN-LAST:event_jbVerificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JButton jbVerificar;
    private javax.swing.JCheckBox jcbEstado;
    private com.toedter.calendar.JDateChooser jdcFechaFinal;
    private com.toedter.calendar.JDateChooser jdcFechaInicial;
    private javax.swing.JLabel jlCalorias;
    private javax.swing.JLabel jlCodigo;
    private javax.swing.JLabel jlFechaFinal;
    private javax.swing.JLabel jlFechaInicial;
    private javax.swing.JLabel jlNombrePaciente;
    private javax.swing.JRadioButton jrActivos;
    private javax.swing.JTextField jtBuscarDieta1;
    private javax.swing.JTextField jtPesoFinal;
    private javax.swing.JTextField jtPesoInicial;
    private javax.swing.JTable tabla2;
    // End of variables declaration//GEN-END:variables
private DefaultTableModel modelo2 = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };

    private void armarTabla2() {
        modelo2.addColumn("Codigo");
        modelo2.addColumn("Dieta");
        modelo2.addColumn("Paciente");
        modelo2.addColumn("Fecha Ini.");
        modelo2.addColumn("Fecha Final");
        modelo2.addColumn("Peso Ini.");
        modelo2.addColumn("Peso Final");
        modelo2.addColumn("Calorias");
        modelo2.addColumn("Estado");

        tabla2.setModel(modelo2);
    }
    private void cargarFilas(){
                    if (jrActivos.isSelected()) {
                for (Dieta listaDieta : dietaData.listaDietaConPacienteCargadosEstadoFalse()) {
                    modelo2.addRow(new Object[]{
                        listaDieta.getCodDieta(),
                        listaDieta.getNombreD(),
                        listaDieta.getPaciente().getNombre(),
                        listaDieta.getFechaIni(),
                        listaDieta.getFechaFin(),
                        listaDieta.getPesoInicial(),
                        listaDieta.getPesoFinal(),
                        listaDieta.getTotalCalorias(),
                        listaDieta.isEstado() ? "Activa" : "No Activa"

                    });
                }
            } else {
                for (Dieta listaDieta : dietaData.listaDietaConPacienteCargadosEstadoActivo()) {
                    modelo2.addRow(new Object[]{
                        listaDieta.getCodDieta(),
                        listaDieta.getNombreD(),
                        listaDieta.getPaciente().getNombre(),
                        listaDieta.getFechaIni(),
                        listaDieta.getFechaFin(),
                        listaDieta.getPesoInicial(),
                        listaDieta.getPesoFinal(),
                        listaDieta.getTotalCalorias(),
                        listaDieta.isEstado() ? "Activa" : "No Activa"

                    });
                }
                
            }
    }
    private void cargarFilas2() {
        for (Dieta listaDieta : dietaData.listaDietaConPacienteCargadosEstadoActivo()) {
            modelo2.addRow(new Object[]{
                listaDieta.getCodDieta(),
                listaDieta.getNombreD(),
                listaDieta.getPaciente().getNombre(),
                listaDieta.getFechaIni(),
                listaDieta.getFechaFin(),
                listaDieta.getPesoInicial(),
                listaDieta.getPesoFinal(),
                listaDieta.getTotalCalorias(),
                listaDieta.isEstado() ? "Activo" : "No Activo"

            });
        }
    }

    private void borrarFilasTablas() {
        int fila = modelo2.getRowCount() - 1;
        for (int i = fila; i >= 0; i--) {
            modelo2.removeRow(i);
        }
    }

    public boolean esDoubleValido(String valor) {
        try {
            Double.parseDouble(valor); // Intenta convertir el String a Double
            return true; // Si no hay excepción, el String es un Double válido
        } catch (NumberFormatException e) {
            return false; // Si ocurre una excepción, no es un Double válido
        }
    }
    public void limpiarCampos(){
        jlCalorias.setText("");
        jlCodigo.setText("");
        jlNombrePaciente.setText("");
        jdcFechaInicial.setDate(null);
        jdcFechaFinal.setDate(null);
        jlFechaInicial.setText("");
        jlFechaFinal.setText("");
        jtPesoInicial.setText("");
        jtPesoFinal.setText("");
        jcbEstado.setSelected(false);
    }
}
